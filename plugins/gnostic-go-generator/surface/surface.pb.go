// Code generated by protoc-gen-go.
// source: surface.proto
// DO NOT EDIT!

/*
Package gnostic_surface_v1 is a generated protocol buffer package.

It is generated from these files:
	surface.proto

It has these top-level messages:
	Field
	Type
	Method
	Model
*/
package gnostic_surface_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Kind int32

const (
	Kind_STRUCT Kind = 0
	Kind_MAP    Kind = 1
)

var Kind_name = map[int32]string{
	0: "STRUCT",
	1: "MAP",
}
var Kind_value = map[string]int32{
	"STRUCT": 0,
	"MAP":    1,
}

func (x Kind) String() string {
	return proto.EnumName(Kind_name, int32(x))
}
func (Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Position int32

const (
	Position_BODY     Position = 0
	Position_HEADER   Position = 1
	Position_FORMDATA Position = 2
	Position_QUERY    Position = 3
	Position_PATH     Position = 4
)

var Position_name = map[int32]string{
	0: "BODY",
	1: "HEADER",
	2: "FORMDATA",
	3: "QUERY",
	4: "PATH",
}
var Position_value = map[string]int32{
	"BODY":     0,
	"HEADER":   1,
	"FORMDATA": 2,
	"QUERY":    3,
	"PATH":     4,
}

func (x Position) String() string {
	return proto.EnumName(Position_name, int32(x))
}
func (Position) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Field is a field in a definition and can be associated with
// a position in a request structure.
type Field struct {
	Name          string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type          string   `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Format        string   `protobuf:"bytes,3,opt,name=format" json:"format,omitempty"`
	ValueType     string   `protobuf:"bytes,4,opt,name=valueType" json:"valueType,omitempty"`
	Position      Position `protobuf:"varint,5,opt,name=position,enum=gnostic.surface.v1.Position" json:"position,omitempty"`
	NativeType    string   `protobuf:"bytes,6,opt,name=nativeType" json:"nativeType,omitempty"`
	FieldName     string   `protobuf:"bytes,7,opt,name=fieldName" json:"fieldName,omitempty"`
	ParameterName string   `protobuf:"bytes,8,opt,name=parameterName" json:"parameterName,omitempty"`
	Serialize     bool     `protobuf:"varint,10,opt,name=serialize" json:"serialize,omitempty"`
	Pointer       bool     `protobuf:"varint,11,opt,name=pointer" json:"pointer,omitempty"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Field) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Field) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Field) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *Field) GetValueType() string {
	if m != nil {
		return m.ValueType
	}
	return ""
}

func (m *Field) GetPosition() Position {
	if m != nil {
		return m.Position
	}
	return Position_BODY
}

func (m *Field) GetNativeType() string {
	if m != nil {
		return m.NativeType
	}
	return ""
}

func (m *Field) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *Field) GetParameterName() string {
	if m != nil {
		return m.ParameterName
	}
	return ""
}

func (m *Field) GetSerialize() bool {
	if m != nil {
		return m.Serialize
	}
	return false
}

func (m *Field) GetPointer() bool {
	if m != nil {
		return m.Pointer
	}
	return false
}

// Type typically corresponds to a definition, parameter, or response
// in an API and is represented by a type in generated code.
type Type struct {
	Name        string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Kind        Kind     `protobuf:"varint,2,opt,name=kind,enum=gnostic.surface.v1.Kind" json:"kind,omitempty"`
	MapType     string   `protobuf:"bytes,3,opt,name=mapType" json:"mapType,omitempty"`
	Description string   `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Fields      []*Field `protobuf:"bytes,5,rep,name=fields" json:"fields,omitempty"`
	TypeName    string   `protobuf:"bytes,6,opt,name=typeName" json:"typeName,omitempty"`
}

func (m *Type) Reset()                    { *m = Type{} }
func (m *Type) String() string            { return proto.CompactTextString(m) }
func (*Type) ProtoMessage()               {}
func (*Type) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Type) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Type) GetKind() Kind {
	if m != nil {
		return m.Kind
	}
	return Kind_STRUCT
}

func (m *Type) GetMapType() string {
	if m != nil {
		return m.MapType
	}
	return ""
}

func (m *Type) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Type) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *Type) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

// Method is an operation of an API and typically has associated client and server code.
type Method struct {
	Name               string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Path               string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Method             string `protobuf:"bytes,3,opt,name=method" json:"method,omitempty"`
	Description        string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	HandlerName        string `protobuf:"bytes,5,opt,name=handlerName" json:"handlerName,omitempty"`
	ProcessorName      string `protobuf:"bytes,6,opt,name=processorName" json:"processorName,omitempty"`
	ClientName         string `protobuf:"bytes,7,opt,name=clientName" json:"clientName,omitempty"`
	ParametersTypeName string `protobuf:"bytes,9,opt,name=parametersTypeName" json:"parametersTypeName,omitempty"`
	ResponsesTypeName  string `protobuf:"bytes,10,opt,name=responsesTypeName" json:"responsesTypeName,omitempty"`
}

func (m *Method) Reset()                    { *m = Method{} }
func (m *Method) String() string            { return proto.CompactTextString(m) }
func (*Method) ProtoMessage()               {}
func (*Method) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Method) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Method) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Method) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Method) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Method) GetHandlerName() string {
	if m != nil {
		return m.HandlerName
	}
	return ""
}

func (m *Method) GetProcessorName() string {
	if m != nil {
		return m.ProcessorName
	}
	return ""
}

func (m *Method) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *Method) GetParametersTypeName() string {
	if m != nil {
		return m.ParametersTypeName
	}
	return ""
}

func (m *Method) GetResponsesTypeName() string {
	if m != nil {
		return m.ResponsesTypeName
	}
	return ""
}

// Model represents an API for code generation.
type Model struct {
	Name    string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Types   []*Type   `protobuf:"bytes,2,rep,name=types" json:"types,omitempty"`
	Methods []*Method `protobuf:"bytes,3,rep,name=methods" json:"methods,omitempty"`
}

func (m *Model) Reset()                    { *m = Model{} }
func (m *Model) String() string            { return proto.CompactTextString(m) }
func (*Model) ProtoMessage()               {}
func (*Model) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Model) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Model) GetTypes() []*Type {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *Model) GetMethods() []*Method {
	if m != nil {
		return m.Methods
	}
	return nil
}

func init() {
	proto.RegisterType((*Field)(nil), "gnostic.surface.v1.Field")
	proto.RegisterType((*Type)(nil), "gnostic.surface.v1.Type")
	proto.RegisterType((*Method)(nil), "gnostic.surface.v1.Method")
	proto.RegisterType((*Model)(nil), "gnostic.surface.v1.Model")
	proto.RegisterEnum("gnostic.surface.v1.Kind", Kind_name, Kind_value)
	proto.RegisterEnum("gnostic.surface.v1.Position", Position_name, Position_value)
}

func init() { proto.RegisterFile("surface.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0xad, 0x13, 0xdb, 0x71, 0x26, 0xbf, 0x56, 0xfe, 0xcd, 0x01, 0x99, 0x52, 0x21, 0x2b, 0xe2,
	0x10, 0x55, 0x95, 0xa5, 0x06, 0x0e, 0x5c, 0x43, 0x93, 0xaa, 0x12, 0x0a, 0x0d, 0xc6, 0x3d, 0xf4,
	0x68, 0xe2, 0x0d, 0x59, 0xe1, 0x78, 0x2d, 0xef, 0x36, 0x12, 0xdc, 0xf8, 0x46, 0xdc, 0xf9, 0x18,
	0x7c, 0x21, 0xb4, 0xb3, 0x71, 0xe2, 0xaa, 0x46, 0xe2, 0xb6, 0xf3, 0xf6, 0xed, 0xfc, 0x79, 0xf3,
	0x6c, 0x38, 0x96, 0x0f, 0xd5, 0x2a, 0x5d, 0xb2, 0xa8, 0xac, 0x84, 0x12, 0x88, 0x5f, 0x0a, 0x21,
	0x15, 0x5f, 0x46, 0x35, 0xbc, 0xbd, 0x1c, 0xfe, 0xea, 0x80, 0x73, 0xcd, 0x59, 0x9e, 0x21, 0x82,
	0x5d, 0xa4, 0x1b, 0x16, 0x58, 0xa1, 0x35, 0xea, 0xc7, 0x74, 0xd6, 0x98, 0xfa, 0x56, 0xb2, 0xa0,
	0x63, 0x30, 0x7d, 0xc6, 0x67, 0xe0, 0xae, 0x44, 0xb5, 0x49, 0x55, 0xd0, 0x25, 0x74, 0x17, 0xe1,
	0x19, 0xf4, 0xb7, 0x69, 0xfe, 0xc0, 0x12, 0xfd, 0xc0, 0xa6, 0xab, 0x03, 0x80, 0x6f, 0xc1, 0x2b,
	0x85, 0xe4, 0x8a, 0x8b, 0x22, 0x70, 0x42, 0x6b, 0x74, 0x32, 0x3e, 0x8b, 0x9e, 0xb6, 0x13, 0x2d,
	0x76, 0x9c, 0x78, 0xcf, 0xc6, 0x97, 0x00, 0x45, 0xaa, 0xf8, 0xd6, 0x24, 0x76, 0x29, 0x71, 0x03,
	0xd1, 0x75, 0x57, 0x7a, 0x80, 0x0f, 0xba, 0xf9, 0x9e, 0xa9, 0xbb, 0x07, 0xf0, 0x15, 0x1c, 0x97,
	0x69, 0x95, 0x6e, 0x98, 0x62, 0x15, 0x31, 0x3c, 0x62, 0x3c, 0x06, 0x75, 0x0e, 0xc9, 0x2a, 0x9e,
	0xe6, 0xfc, 0x3b, 0x0b, 0x20, 0xb4, 0x46, 0x5e, 0x7c, 0x00, 0x30, 0x80, 0x5e, 0x29, 0x78, 0xa1,
	0x58, 0x15, 0x0c, 0xe8, 0xae, 0x0e, 0x87, 0xbf, 0x2d, 0xb0, 0xa9, 0x89, 0x36, 0xf1, 0x2e, 0xc0,
	0xfe, 0xca, 0x8b, 0x8c, 0xc4, 0x3b, 0x19, 0x07, 0x6d, 0xe3, 0xbe, 0xe7, 0x45, 0x16, 0x13, 0x4b,
	0x17, 0xd9, 0xa4, 0x25, 0xcd, 0x68, 0x74, 0xad, 0x43, 0x0c, 0x61, 0x90, 0x31, 0xb9, 0xac, 0x78,
	0x49, 0xea, 0x19, 0x69, 0x9b, 0x10, 0x5e, 0x82, 0x4b, 0x13, 0xcb, 0xc0, 0x09, 0xbb, 0xa3, 0xc1,
	0xf8, 0x79, 0x5b, 0x2d, 0xda, 0x72, 0xbc, 0x23, 0xe2, 0x29, 0x78, 0x7a, 0x9b, 0x24, 0x89, 0xd1,
	0x74, 0x1f, 0x0f, 0x7f, 0x76, 0xc0, 0x9d, 0x33, 0xb5, 0x16, 0x7f, 0x35, 0x45, 0x99, 0xaa, 0x75,
	0x6d, 0x0a, 0x7d, 0xd6, 0xa6, 0xd8, 0xd0, 0x8b, 0xda, 0x14, 0x26, 0xfa, 0x87, 0xde, 0x43, 0x18,
	0xac, 0xd3, 0x22, 0xcb, 0x77, 0xeb, 0x71, 0x0c, 0xa3, 0x01, 0xd1, 0x0a, 0x2b, 0xb1, 0x64, 0x52,
	0x8a, 0xaa, 0xd1, 0xef, 0x63, 0x50, 0xdb, 0x64, 0x99, 0x73, 0x56, 0xa8, 0x86, 0x0f, 0x1a, 0x08,
	0x46, 0x80, 0xfb, 0x9d, 0xcb, 0xa4, 0x1e, 0xbd, 0x4f, 0xbc, 0x96, 0x1b, 0xbc, 0x80, 0xff, 0x2b,
	0x26, 0x4b, 0x51, 0x48, 0x76, 0xa0, 0x03, 0xd1, 0x9f, 0x5e, 0x0c, 0x7f, 0x58, 0xe0, 0xcc, 0x45,
	0xc6, 0xf2, 0x56, 0xc5, 0x22, 0x70, 0xb4, 0xb8, 0x32, 0xe8, 0xd0, 0x7a, 0x5a, 0xad, 0xa0, 0x53,
	0xc5, 0x86, 0x86, 0x6f, 0xa0, 0x67, 0xf4, 0x93, 0x41, 0x97, 0x5e, 0x9c, 0xb6, 0xbd, 0x30, 0x2b,
	0x8a, 0x6b, 0xea, 0xf9, 0x0b, 0xb0, 0xb5, 0x9f, 0x10, 0xc0, 0xfd, 0x94, 0xc4, 0x77, 0x57, 0x89,
	0x7f, 0x84, 0x3d, 0xe8, 0xce, 0x27, 0x0b, 0xdf, 0x3a, 0xbf, 0x02, 0xaf, 0xfe, 0xb6, 0xd0, 0x03,
	0xfb, 0xdd, 0xed, 0xf4, 0xde, 0x3f, 0xd2, 0xd4, 0x9b, 0xd9, 0x64, 0x3a, 0x8b, 0x7d, 0x0b, 0xff,
	0x03, 0xef, 0xfa, 0x36, 0x9e, 0x4f, 0x27, 0xc9, 0xc4, 0xef, 0x60, 0x1f, 0x9c, 0x8f, 0x77, 0xb3,
	0xf8, 0xde, 0xef, 0x6a, 0xfa, 0x62, 0x92, 0xdc, 0xf8, 0xf6, 0x67, 0x97, 0xfe, 0x23, 0xaf, 0xff,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x88, 0xc4, 0xe0, 0x2b, 0x58, 0x04, 0x00, 0x00,
}
