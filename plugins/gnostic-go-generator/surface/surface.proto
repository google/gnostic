// Copyright 2017 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Model an API surface for code generation.

syntax = "proto3";

package gnostic.surface.v1;

enum Kind {
	STRUCT = 0;
	MAP = 1;
}

enum Position {
	BODY = 0;
	HEADER = 1;
	FORMDATA = 2;
	QUERY = 3;
	PATH = 4;
}

// Field is a field in a definition and can be associated with
// a position in a request structure.
message Field {
	string name = 1; // the name as specified in the API description
	string type = 2; // the specified type of the field
	string valueType = 3; // if Type is a pointer, this is the type of its value
	string nativeType = 4; // the programming-language native type of the field
	string fieldName = 5; // the name to use for a data structure field
	string parameterName = 6; // the name to use for a function parameter
	string JSONName = 7; // the name to use in JSON serialization
	Position position = 8; // "body", "header", "formdata", "query", or "path"
}

// Type typically corresponds to a definition, parameter, or response
// in an API and is represented by a type in generated code.
message Type {
	string name = 1; // the name to use for the type
	Kind kind = 2; // a meta-description of the type (struct, map, etc)
	string mapType = 3; // if the type is a map, this is its contents
	string description = 4; // a comment describing the type
	repeated Field fields = 5; // the fields of the type
}

// Method is an operation of an API and typically has associated client and server code.
message Method {
	string name = 1; // Operation name, possibly generated from method and path
	string path = 2; // HTTP path
	string method = 3; // HTTP method name
	string description = 4; // description of method
	string handlerName = 5; // name of the generated handler
	string processorName = 6; // name of the processing function in the service interface
	string clientName = 7; // name of client
	string resultTypeName = 8; // native type name for the result structure
	Type parametersType = 9; // parameters (input), with fields corresponding to input parameters
	Type responsesType = 10; // responses (output), with fields corresponding to possible response values
}

// Model represents an API for code generation.
message Model {
	string name = 1; // a free-form title for the API
	repeated Type types = 2; // the types used by the API
	repeated Method methods = 3; // the methods (functions) of the API
}