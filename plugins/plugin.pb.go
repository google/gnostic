// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plugin.proto

/*
Package gnostic_plugin_v1 is a generated protocol buffer package.

It is generated from these files:
	plugin.proto

It has these top-level messages:
	Version
	Parameter
	Request
	Message
	Messages
	Response
	File
*/
package gnostic_plugin_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message_Level int32

const (
	Message_UNKNOWN Message_Level = 0
	Message_INFO    Message_Level = 1
	Message_WARNING Message_Level = 2
	Message_ERROR   Message_Level = 3
	Message_FATAL   Message_Level = 4
)

var Message_Level_name = map[int32]string{
	0: "UNKNOWN",
	1: "INFO",
	2: "WARNING",
	3: "ERROR",
	4: "FATAL",
}
var Message_Level_value = map[string]int32{
	"UNKNOWN": 0,
	"INFO":    1,
	"WARNING": 2,
	"ERROR":   3,
	"FATAL":   4,
}

func (x Message_Level) String() string {
	return proto.EnumName(Message_Level_name, int32(x))
}
func (Message_Level) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

// The version number of gnostic.
type Version struct {
	Major int32 `protobuf:"varint,1,opt,name=major" json:"major,omitempty"`
	Minor int32 `protobuf:"varint,2,opt,name=minor" json:"minor,omitempty"`
	Patch int32 `protobuf:"varint,3,opt,name=patch" json:"patch,omitempty"`
	// A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
	// be empty for mainline stable releases.
	Suffix string `protobuf:"bytes,4,opt,name=suffix" json:"suffix,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Version) GetMajor() int32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *Version) GetMinor() int32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *Version) GetPatch() int32 {
	if m != nil {
		return m.Patch
	}
	return 0
}

func (m *Version) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

// A parameter passed to the plugin from (or through) gnostic.
type Parameter struct {
	// The name of the parameter as specified in the option string
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The parameter value as specified in the option string
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Parameter) Reset()                    { *m = Parameter{} }
func (m *Parameter) String() string            { return proto.CompactTextString(m) }
func (*Parameter) ProtoMessage()               {}
func (*Parameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Parameter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Parameter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// An encoded Request is written to the plugin's stdin.
type Request struct {
	// filename or URL of the original source document
	SourceName string `protobuf:"bytes,1,opt,name=source_name,json=sourceName" json:"source_name,omitempty"`
	// Output path specified in the plugin invocation.
	OutputPath string `protobuf:"bytes,2,opt,name=output_path,json=outputPath" json:"output_path,omitempty"`
	// Plugin parameters parsed from the invocation string.
	Parameters []*Parameter `protobuf:"bytes,3,rep,name=parameters" json:"parameters,omitempty"`
	// The version number of gnostic.
	CompilerVersion *Version `protobuf:"bytes,4,opt,name=compiler_version,json=compilerVersion" json:"compiler_version,omitempty"`
	// API models
	Models []*google_protobuf.Any `protobuf:"bytes,5,rep,name=models" json:"models,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Request) GetSourceName() string {
	if m != nil {
		return m.SourceName
	}
	return ""
}

func (m *Request) GetOutputPath() string {
	if m != nil {
		return m.OutputPath
	}
	return ""
}

func (m *Request) GetParameters() []*Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *Request) GetCompilerVersion() *Version {
	if m != nil {
		return m.CompilerVersion
	}
	return nil
}

func (m *Request) GetModels() []*google_protobuf.Any {
	if m != nil {
		return m.Models
	}
	return nil
}

// Plugins can return messages to be collated and reported by gnostic.
type Message struct {
	// message severity
	Level Message_Level `protobuf:"varint,1,opt,name=level,enum=gnostic.plugin.v1.Message_Level" json:"level,omitempty"`
	// a unique message identifier
	Code string `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	// message text
	Text string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	// an associated key path in an API description
	Keys []string `protobuf:"bytes,4,rep,name=keys" json:"keys,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Message) GetLevel() Message_Level {
	if m != nil {
		return m.Level
	}
	return Message_UNKNOWN
}

func (m *Message) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Message) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type Messages struct {
	Messages []*Message `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (m *Messages) Reset()                    { *m = Messages{} }
func (m *Messages) String() string            { return proto.CompactTextString(m) }
func (*Messages) ProtoMessage()               {}
func (*Messages) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Messages) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

// The plugin writes an encoded Response to stdout.
type Response struct {
	// Error message.  If non-empty, the plugin failed.
	// The plugin process should exit with status code zero
	// even if it reports an error in this way.
	//
	// This should be used to indicate errors which prevent the plugin from
	// operating as intended.  Errors which indicate a problem in gnostic
	// itself -- such as the input Document being unparseable -- should be
	// reported by writing a message to stderr and exiting with a non-zero
	// status code.
	Errors []string `protobuf:"bytes,1,rep,name=errors" json:"errors,omitempty"`
	// file output, each file will be written by gnostic to an appropriate location.
	Files []*File `protobuf:"bytes,2,rep,name=files" json:"files,omitempty"`
	// informational messages to be collected and reported by gnostic.
	Messages []*Message `protobuf:"bytes,3,rep,name=messages" json:"messages,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Response) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *Response) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *Response) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

// File describes a file generated by a plugin.
type File struct {
	// name of the file
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// data to be written to the file
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *File) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Version)(nil), "gnostic.plugin.v1.Version")
	proto.RegisterType((*Parameter)(nil), "gnostic.plugin.v1.Parameter")
	proto.RegisterType((*Request)(nil), "gnostic.plugin.v1.Request")
	proto.RegisterType((*Message)(nil), "gnostic.plugin.v1.Message")
	proto.RegisterType((*Messages)(nil), "gnostic.plugin.v1.Messages")
	proto.RegisterType((*Response)(nil), "gnostic.plugin.v1.Response")
	proto.RegisterType((*File)(nil), "gnostic.plugin.v1.File")
	proto.RegisterEnum("gnostic.plugin.v1.Message_Level", Message_Level_name, Message_Level_value)
}

func init() { proto.RegisterFile("plugin.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x51, 0x6f, 0xd3, 0x3c,
	0x14, 0xfd, 0xd2, 0x24, 0x6b, 0x73, 0xbb, 0x6f, 0x04, 0x6b, 0x82, 0x50, 0x21, 0xad, 0xca, 0x0b,
	0x7d, 0x80, 0x4c, 0x2b, 0x62, 0x4f, 0xbc, 0xb4, 0xd2, 0x5a, 0x4d, 0x8c, 0xb4, 0xb2, 0x80, 0x3d,
	0x56, 0x5e, 0xea, 0xa6, 0x81, 0x24, 0x0e, 0xb6, 0x53, 0xad, 0x3f, 0x81, 0xbf, 0xc1, 0x2f, 0xe1,
	0x97, 0x21, 0x64, 0x3b, 0xad, 0x86, 0x28, 0x0f, 0xbc, 0x9d, 0x7b, 0x74, 0x7c, 0xee, 0xbd, 0xc7,
	0x17, 0x8e, 0xab, 0xbc, 0x4e, 0xb3, 0x32, 0xaa, 0x38, 0x93, 0x0c, 0x3d, 0x4e, 0x4b, 0x26, 0x64,
	0x96, 0x44, 0x0d, 0xbb, 0xb9, 0xe8, 0x3d, 0x4b, 0x19, 0x4b, 0x73, 0x7a, 0xae, 0x05, 0x77, 0xf5,
	0xea, 0x9c, 0x94, 0x5b, 0xa3, 0x0e, 0x13, 0x68, 0x7f, 0xa2, 0x5c, 0x64, 0xac, 0x44, 0xa7, 0xe0,
	0x16, 0xe4, 0x33, 0xe3, 0x81, 0xd5, 0xb7, 0x06, 0x2e, 0x36, 0x85, 0x66, 0xb3, 0x92, 0xf1, 0xa0,
	0xd5, 0xb0, 0xaa, 0x50, 0x6c, 0x45, 0x64, 0xb2, 0x0e, 0x6c, 0xc3, 0xea, 0x02, 0x3d, 0x81, 0x23,
	0x51, 0xaf, 0x56, 0xd9, 0x7d, 0xe0, 0xf4, 0xad, 0x81, 0x87, 0x9b, 0x2a, 0x7c, 0x03, 0xde, 0x9c,
	0x70, 0x52, 0x50, 0x49, 0x39, 0x42, 0xe0, 0x94, 0xa4, 0xa0, 0xba, 0x8b, 0x87, 0x35, 0x56, 0x76,
	0x1b, 0x92, 0xd7, 0x54, 0x37, 0xf1, 0xb0, 0x29, 0xc2, 0x9f, 0x16, 0xb4, 0x31, 0xfd, 0x5a, 0x53,
	0x21, 0xd1, 0x19, 0x74, 0x05, 0xab, 0x79, 0x42, 0x17, 0x0f, 0x1e, 0x83, 0xa1, 0x62, 0x65, 0x71,
	0x06, 0x5d, 0x56, 0xcb, 0xaa, 0x96, 0x8b, 0x8a, 0xc8, 0x75, 0x63, 0x04, 0x86, 0x9a, 0x13, 0xb9,
	0x46, 0x6f, 0x01, 0xaa, 0xdd, 0x10, 0x22, 0xb0, 0xfb, 0xf6, 0xa0, 0x3b, 0x7c, 0x1e, 0xfd, 0x11,
	0x56, 0xb4, 0x9f, 0x14, 0x3f, 0xd0, 0xa3, 0x2b, 0xf0, 0x13, 0x56, 0x54, 0x59, 0x4e, 0xf9, 0x62,
	0x63, 0x02, 0xd3, 0x4b, 0x76, 0x87, 0xbd, 0x03, 0x1e, 0x4d, 0xa4, 0xf8, 0xd1, 0xee, 0xcd, 0x2e,
	0xe3, 0x97, 0x70, 0x54, 0xb0, 0x25, 0xcd, 0x45, 0xe0, 0xea, 0x01, 0x4e, 0x23, 0xf3, 0x35, 0xd1,
	0xee, 0x6b, 0xa2, 0x51, 0xb9, 0xc5, 0x8d, 0x26, 0xfc, 0x61, 0x41, 0xfb, 0x3d, 0x15, 0x82, 0xa4,
	0x14, 0x5d, 0x82, 0x9b, 0xd3, 0x0d, 0xcd, 0xf5, 0xea, 0x27, 0xc3, 0xfe, 0x81, 0xae, 0x8d, 0x34,
	0xba, 0x51, 0x3a, 0x6c, 0xe4, 0x2a, 0xee, 0x84, 0x2d, 0x77, 0xc9, 0x6a, 0xac, 0x38, 0x49, 0xef,
	0xa5, 0xfe, 0x3c, 0x0f, 0x6b, 0xac, 0xb8, 0x2f, 0x74, 0x2b, 0x02, 0xa7, 0x6f, 0x2b, 0x4e, 0xe1,
	0x70, 0x04, 0xae, 0xf6, 0x42, 0x5d, 0x68, 0x7f, 0x8c, 0xdf, 0xc5, 0xb3, 0xdb, 0xd8, 0xff, 0x0f,
	0x75, 0xc0, 0xb9, 0x8e, 0x27, 0x33, 0xdf, 0x52, 0xf4, 0xed, 0x08, 0xc7, 0xd7, 0xf1, 0xd4, 0x6f,
	0x21, 0x0f, 0xdc, 0x2b, 0x8c, 0x67, 0xd8, 0xb7, 0x15, 0x9c, 0x8c, 0x3e, 0x8c, 0x6e, 0x7c, 0x27,
	0x1c, 0x43, 0xa7, 0x19, 0x4b, 0xa0, 0x4b, 0xe8, 0x14, 0x0d, 0x0e, 0x2c, 0xbd, 0x7e, 0xef, 0xef,
	0x5b, 0xe0, 0xbd, 0x36, 0xfc, 0x66, 0x41, 0x07, 0x53, 0x51, 0xb1, 0x52, 0x50, 0x75, 0x63, 0x94,
	0x73, 0xc6, 0x8d, 0x85, 0x87, 0x9b, 0x0a, 0xbd, 0x02, 0x77, 0x95, 0xe5, 0x54, 0x04, 0x2d, 0xed,
	0xfc, 0xf4, 0x80, 0xf3, 0x24, 0xcb, 0x29, 0x36, 0xaa, 0xdf, 0x66, 0xb1, 0xff, 0x61, 0x96, 0x08,
	0x1c, 0x65, 0x73, 0xf0, 0x8a, 0x11, 0x38, 0x4b, 0x22, 0x89, 0x8e, 0xfa, 0x18, 0x6b, 0x3c, 0x7e,
	0x01, 0x27, 0x8c, 0xa7, 0x7b, 0xeb, 0xcd, 0xc5, 0xf8, 0xff, 0xa9, 0xc1, 0x73, 0xdd, 0x65, 0x6e,
	0x7d, 0x6f, 0xd9, 0xd3, 0x78, 0x76, 0x77, 0xa4, 0x2f, 0xe0, 0xf5, 0xaf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xca, 0x22, 0xc2, 0xeb, 0xcd, 0x03, 0x00, 0x00,
}
