// GENERATED: DO NOT EDIT
//
// This file contains base64 encodings of templates used for Swift OpenAPI code generation.
//
func loadTemplates() -> [String:String] {
  return [
    "client.swift": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KLy8KLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7Ci8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0Ci8vCi8vICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAovLwovLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgovLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoKLy8gQ2xpZW50IGNvZGUgCgppbXBvcnQgRm91bmRhdGlvbgppbXBvcnQgRGlzcGF0Y2gKCmVudW0gQ2xpZW50RXJyb3I6IFN3aWZ0LkVycm9yIHsKICBjYXNlIGVycm9yV2l0aENvZGUoSW50KQp9CgpwdWJsaWMgY2xhc3MgQ2xpZW50IHsKICB2YXIgc2VydmljZSA6IFN0cmluZwogIAogIHB1YmxpYyBpbml0KHNlcnZpY2U6IFN0cmluZykgewogICAgc2VsZi5zZXJ2aWNlID0gc2VydmljZQogIH0gCi8vLXslIGZvciBzZXJ2aWNlTWV0aG9kIGluIHJlbmRlcmVyLm1ldGhvZHMgJX0KCiAgLy8ge3sgc2VydmljZU1ldGhvZC5kZXNjcmlwdGlvbiB9fSBBc3luY2hyb25vdXMuCiAgcHVibGljIGZ1bmMge3sgc2VydmljZU1ldGhvZC5uYW1lIH19KHt7IHNlcnZpY2VNZXRob2R8YXN5bmNDbGllbnRQYXJhbWV0ZXJzRGVjbGFyYXRpb24gfX0pIHRocm93cyB7CiAgICAgIHZhciBwYXRoID0gc2VsZi5zZXJ2aWNlIAogICAgICBwYXRoID0gcGF0aCArICJ7eyBzZXJ2aWNlTWV0aG9kLnBhdGggfX0iCiAgICAgIC8vLXslIGZvciBzZXJ2aWNlVHlwZUZpZWxkIGluIHNlcnZpY2VNZXRob2R8cGFyYW1ldGVyc1R5cGVGaWVsZHMgJX0KICAgICAgLy8teyUgaWYgc2VydmljZVR5cGVGaWVsZC5wb3NpdGlvbiA9PSAicGF0aCIgJX0KICAgICAgcGF0aCA9IHBhdGgucmVwbGFjaW5nT2NjdXJyZW5jZXMob2Y6InsiKyJ7eyBzZXJ2aWNlVHlwZUZpZWxkLm5hbWUgfX0iKyJ9Iiwgd2l0aDoiXCh7eyBzZXJ2aWNlVHlwZUZpZWxkLm5hbWUgfX0pIikKICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgLy8teyUgZW5kZm9yICV9CiAgICAgIGd1YXJkIGxldCB1cmwgPSBVUkwoc3RyaW5nOnBhdGgpIGVsc2UgewogICAgICAgIHRocm93IENsaWVudEVycm9yLmVycm9yV2l0aENvZGUoMCkKICAgICAgfQogICAgICB2YXIgcmVxdWVzdCA9IFVSTFJlcXVlc3QodXJsOnVybCkKICAgICAgcmVxdWVzdC5odHRwTWV0aG9kID0gInt7IHNlcnZpY2VNZXRob2QubWV0aG9kIH19IgogICAgICAvLy17JSBmb3Igc2VydmljZVR5cGVGaWVsZCBpbiBzZXJ2aWNlTWV0aG9kfHBhcmFtZXRlcnNUeXBlRmllbGRzICV9CiAgICAgIC8vLXslIGlmIHNlcnZpY2VUeXBlRmllbGQucG9zaXRpb24gPT0gImJvZHkiICV9CiAgICAgIGxldCBqc29uT2JqZWN0ID0ge3sgc2VydmljZVR5cGVGaWVsZC5uYW1lIH19Lmpzb25PYmplY3QoKQogICAgICByZXF1ZXN0Lmh0dHBCb2R5ID0gdHJ5IEpTT05TZXJpYWxpemF0aW9uLmRhdGEod2l0aEpTT05PYmplY3Q6anNvbk9iamVjdCkKICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgLy8teyUgZW5kZm9yICV9CgkgIC8vLXslIGlmIHNlcnZpY2VNZXRob2R8aGFzUmVzcG9uc2VzICV9CiAgICAgIGZldGNoKHJlcXVlc3QpIHsoZGF0YSwgcmVzcG9uc2UsIGVycm9yKSBpbgogICAgICAgIGlmIGVycm9yICE9IG5pbCB7CiAgICAgICAgICBjYWxsYmFjayhuaWwsIENsaWVudEVycm9yLmVycm9yV2l0aENvZGUoMCkpCgkgIAkgIHJldHVybgogICAgICAgIH0KICAgICAgICBndWFyZCBsZXQgaHR0cFJlc3BvbnNlID0gcmVzcG9uc2UgZWxzZSB7CiAgICAgICAgICBjYWxsYmFjayhuaWwsIENsaWVudEVycm9yLmVycm9yV2l0aENvZGUoMCkpCgkJICByZXR1cm4KICAgICAgICB9CiAgICAgICAgaWYgaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGUgPT0gMjAwIHsKICAgICAgICAgIGlmIGxldCBkYXRhID0gZGF0YSB7CiAgICAgICAgICAgIGxldCBqc29uT2JqZWN0ID0gdHJ5ISBKU09OU2VyaWFsaXphdGlvbi5qc29uT2JqZWN0KHdpdGg6ZGF0YSkKICAgICAgICAgICAgaWYgbGV0IHZhbHVlID0ge3sgc2VydmljZU1ldGhvZC5yZXN1bHRUeXBlTmFtZSAgfX0oanNvbk9iamVjdDpqc29uT2JqZWN0KSB7ICAgICAgICAgIAogICAgICAgICAgICAgIGNhbGxiYWNrKHZhbHVlLCBuaWwpCgkJCSAgcmV0dXJuCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCQkgIGNhbGxiYWNrKG5pbCwgbmlsKQoJICAgIH0gZWxzZSB7CiAgICAgICAgICBjYWxsYmFjayhuaWwsIENsaWVudEVycm9yLmVycm9yV2l0aENvZGUoaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGUpKQogICAgICAgIH0KCSAgfQoJICAvLy17JSBlbHNlICV9CiAgICAgIGZldGNoKHJlcXVlc3QpIHsoZGF0YSwgcmVzcG9uc2UsIGVycm9yKSBpbgogICAgICAgIGlmIGVycm9yICE9IG5pbCB7CiAgICAgICAgICBjYWxsYmFjayhDbGllbnRFcnJvci5lcnJvcldpdGhDb2RlKDApKQoJICAJICByZXR1cm4KICAgICAgICB9CiAgICAgICAgZ3VhcmQgbGV0IGh0dHBSZXNwb25zZSA9IHJlc3BvbnNlIGVsc2UgewogICAgICAgICAgY2FsbGJhY2soQ2xpZW50RXJyb3IuZXJyb3JXaXRoQ29kZSgwKSkKCQkgIHJldHVybgogICAgICAgIH0KICAgICAgICBpZiBodHRwUmVzcG9uc2Uuc3RhdHVzQ29kZSA9PSAyMDAgewoJCSAgY2FsbGJhY2sobmlsKQoJICAgIH0gZWxzZSB7CiAgICAgICAgICBjYWxsYmFjayhDbGllbnRFcnJvci5lcnJvcldpdGhDb2RlKGh0dHBSZXNwb25zZS5zdGF0dXNDb2RlKSkKICAgICAgICB9CgkgIH0JICAJICAKCSAgLy8teyUgZW5kaWYgJX0JICAKICB9CiAgCiAgLy8ge3sgc2VydmljZU1ldGhvZC5kZXNjcmlwdGlvbiB9fSBTeW5jaHJvbm91cy4KICBwdWJsaWMgZnVuYyB7eyBzZXJ2aWNlTWV0aG9kLm5hbWUgfX0oe3sgc2VydmljZU1ldGhvZHxzeW5jQ2xpZW50UGFyYW1ldGVyc0RlY2xhcmF0aW9uIH19KSB0aHJvd3Mge3sgc2VydmljZU1ldGhvZHxzeW5jQ2xpZW50UmV0dXJuRGVjbGFyYXRpb24gfX0gewoJICBsZXQgc2VtID0gRGlzcGF0Y2hTZW1hcGhvcmUodmFsdWU6IDApCgkgIC8vLXslIGlmIHNlcnZpY2VNZXRob2R8aGFzUmVzcG9uc2VzICV9CgkgIHZhciByZXNwb25zZSA6IHt7IHNlcnZpY2VNZXRob2QucmVzdWx0VHlwZU5hbWUgfX0/CgkgIC8vLXslIGVuZGlmICV9CgkgIHZhciBlcnJvciA6IFN3aWZ0LkVycm9yPwoJICAvLy17JSBpZiBzZXJ2aWNlTWV0aG9kfGhhc1Jlc3BvbnNlcyAlfQkgIAoJICB0cnkge3sgc2VydmljZU1ldGhvZC5uYW1lIH19KHt7IHNlcnZpY2VNZXRob2R8cGFyYW1ldGVyRmllbGROYW1lcyB9fSkge3IsIGUgaW4KCSAgCSAgcmVzcG9uc2UgPSByIAoJICAvLy17JSBlbHNlICV9CgkgIHRyeSB7eyBzZXJ2aWNlTWV0aG9kLm5hbWUgfX0oe3sgc2VydmljZU1ldGhvZHxwYXJhbWV0ZXJGaWVsZE5hbWVzIH19KSB7ZSBpbgkgIAoJICAvLy17JSBlbmRpZiAlfQkgIAkgIAoJCSAgZXJyb3IgPSBlIAoJCSAgc2VtLnNpZ25hbCgpCgkgIH0KCSAgc2VtLndhaXQoKQoJICBpZiBsZXQgYWN0dWFsRXJyb3IgPSBlcnJvciB7CgkJICB0aHJvdyBhY3R1YWxFcnJvcgoJICB9CgkgIC8vLXslIGlmIHNlcnZpY2VNZXRob2R8aGFzUmVzcG9uc2VzICV9CSAgCgkgIGlmIGxldCBhY3R1YWxSZXNwb25zZSA9IHJlc3BvbnNlIHsKCQkgIHJldHVybiBhY3R1YWxSZXNwb25zZQoJICB9IGVsc2UgewoJCSAgdGhyb3cgQ2xpZW50RXJyb3IuZXJyb3JXaXRoQ29kZSgwKQoJICB9CgkgIC8vLXslIGVuZGlmICV9CiAgfQovLy17JSBlbmRmb3IgJX0KfQ==",
    "fetch.swift": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KLy8KLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7Ci8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0Ci8vCi8vICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAovLwovLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgovLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoKaW1wb3J0IEZvdW5kYXRpb24KaW1wb3J0IERpc3BhdGNoCmltcG9ydCBLaXR1cmFOZXQKCi8vIGZldGNoIG1ha2VzIGEgc3luY2hyb25vdXMgcmVxdWVzdCB1c2luZyBLaXR1cmFOZXQncyBDbGllbnRSZXF1ZXN0IGNsYXNzCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9JQk0tU3dpZnQvS2l0dXJhLW5ldC9ibG9iL21hc3Rlci9Tb3VyY2VzL0tpdHVyYU5ldC9DbGllbnRSZXF1ZXN0LnN3aWZ0CnB1YmxpYyBmdW5jIGZldGNoKF8gdXJsUmVxdWVzdDogVVJMUmVxdWVzdCkgLT4gKERhdGE/LCBIVFRQVVJMUmVzcG9uc2U/LCBFcnJvcj8pIHsKICB2YXIgZGF0YTogRGF0YT8KICB2YXIgdXJsUmVzcG9uc2U6IEhUVFBVUkxSZXNwb25zZT8KICBsZXQgZXJyb3I6IEVycm9yPyA9IG5pbCAvLyBtYWtlIHRoaXMgbXV0YWJsZSB3aGVuIHdlIHN0YXJ0IHVzaW5nIGl0CiAgbGV0IHNlbSA9IERpc3BhdGNoU2VtYXBob3JlKHZhbHVlOiAwKQogIGd1YXJkIGxldCBtZXRob2QgPSB1cmxSZXF1ZXN0Lmh0dHBNZXRob2QgZWxzZSB7CiAgICByZXR1cm4gKGRhdGEsIHVybFJlc3BvbnNlLCBlcnJvcikKICB9CiAgZ3VhcmQgbGV0IHVybCA9IHVybFJlcXVlc3QudXJsIGVsc2UgewogICAgcmV0dXJuIChkYXRhLCB1cmxSZXNwb25zZSwgZXJyb3IpCiAgfQogIGd1YXJkIGxldCBzY2hlbWUgPSB1cmwuc2NoZW1lIGVsc2UgewogICAgcmV0dXJuIChkYXRhLCB1cmxSZXNwb25zZSwgZXJyb3IpCiAgfQogIGd1YXJkIGxldCBob3N0ID0gdXJsLmhvc3QgZWxzZSB7CiAgICByZXR1cm4gKGRhdGEsIHVybFJlc3BvbnNlLCBlcnJvcikKICB9CiAgZ3VhcmQgbGV0IHBvcnQgPSB1cmwucG9ydCBlbHNlIHsKICAgIHJldHVybiAoZGF0YSwgdXJsUmVzcG9uc2UsIGVycm9yKQogIH0KICBsZXQgb3B0aW9ucyA6IFtDbGllbnRSZXF1ZXN0Lk9wdGlvbnNdID0gWwogICAgLm1ldGhvZChtZXRob2QpLAogICAgLnNjaGVtYShzY2hlbWUpLAogICAgLmhvc3RuYW1lKGhvc3QpLAogICAgLnBvcnQoSW50MTYocG9ydCkpLAogICAgLnBhdGgodXJsLnBhdGgpLAogICAgLy8gaGVhZGVycywgZXRjCiAgXQogIGxldCByZXF1ZXN0ID0gSFRUUC5yZXF1ZXN0KG9wdGlvbnMpIHsgKHJlc3BvbnNlKSBpbgogICAgZ3VhcmQgbGV0IHJlc3BvbnNlID0gcmVzcG9uc2UgZWxzZSB7CiAgICAgIHNlbS5zaWduYWwoKQogICAgICByZXR1cm4KICAgIH0KICAgIHZhciByZXNwb25zZURhdGEgPSBEYXRhKCkKICAgIGRvIHsKICAgICAgbGV0IGNvZGUgPSByZXNwb25zZS5odHRwU3RhdHVzQ29kZQogICAgICB0cnkgcmVzcG9uc2UucmVhZEFsbERhdGEoaW50bzogJnJlc3BvbnNlRGF0YSkKICAgICAgZGF0YSA9IHJlc3BvbnNlRGF0YQogICAgICB1cmxSZXNwb25zZSA9IEhUVFBVUkxSZXNwb25zZSh1cmw6dXJsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNDb2RlOmNvZGUucmF3VmFsdWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBWZXJzaW9uOiJIVFRQLzEuMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlckZpZWxkczpbOl0pCiAgICAgIHNlbS5zaWduYWwoKQogICAgICByZXR1cm4KICAgIH0gY2F0Y2ggewogICAgICBzZW0uc2lnbmFsKCkKICAgICAgcmV0dXJuCiAgICB9CiAgfQogIGlmIGxldCByZXF1ZXN0RGF0YSA9IHVybFJlcXVlc3QuaHR0cEJvZHkgewogICAgcmVxdWVzdC53cml0ZShmcm9tOnJlcXVlc3REYXRhKQogIH0KICByZXF1ZXN0LmVuZCgpIC8vIHNlbmQgdGhlIHJlcXVlc3QKICAvLyBub3cgd2FpdCBvbiB0aGUgc2VtYXBob3JlIGZvciBhIHJlc3BvbnNlCiAgbGV0IHJlc3VsdCA9IHNlbS53YWl0KHRpbWVvdXQ6IERpc3BhdGNoVGltZS5kaXN0YW50RnV0dXJlKQogIHN3aXRjaCByZXN1bHQgewogIGNhc2UgLnN1Y2Nlc3M6CiAgICByZXR1cm4gKGRhdGEsIHVybFJlc3BvbnNlLCBlcnJvcikKICBkZWZhdWx0OiAvLyBpbmNsdWRlcyAudGltZW91dAogICAgcmV0dXJuIChkYXRhLCB1cmxSZXNwb25zZSwgZXJyb3IpCiAgfQp9CgovLyBmZXRjaCBtYWtlcyBhbiBhc3luY2hyb25vdXMgcmVxdWVzdCB1c2luZyBLaXR1cmFOZXQncyBDbGllbnRSZXF1ZXN0IGNsYXNzCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9JQk0tU3dpZnQvS2l0dXJhLW5ldC9ibG9iL21hc3Rlci9Tb3VyY2VzL0tpdHVyYU5ldC9DbGllbnRSZXF1ZXN0LnN3aWZ0CnB1YmxpYyBmdW5jIGZldGNoKF8gdXJsUmVxdWVzdDogVVJMUmVxdWVzdCwgY2FsbGJhY2s6QGVzY2FwaW5nIChEYXRhPywgSFRUUFVSTFJlc3BvbnNlPywgRXJyb3I/KSAtPiAoKSkgewogIHZhciBkYXRhOiBEYXRhPwogIHZhciB1cmxSZXNwb25zZTogSFRUUFVSTFJlc3BvbnNlPwogIGxldCBlcnJvcjogRXJyb3I/ID0gbmlsIC8vIG1ha2UgdGhpcyBtdXRhYmxlIHdoZW4gd2Ugc3RhcnQgdXNpbmcgaXQKICBndWFyZCBsZXQgbWV0aG9kID0gdXJsUmVxdWVzdC5odHRwTWV0aG9kIGVsc2UgewogICAgY2FsbGJhY2sgKGRhdGEsIHVybFJlc3BvbnNlLCBlcnJvcikKCXJldHVybgogIH0KICBndWFyZCBsZXQgdXJsID0gdXJsUmVxdWVzdC51cmwgZWxzZSB7CiAgICBjYWxsYmFjayAoZGF0YSwgdXJsUmVzcG9uc2UsIGVycm9yKQoJcmV0dXJuCiAgfQogIGd1YXJkIGxldCBzY2hlbWUgPSB1cmwuc2NoZW1lIGVsc2UgewogICAgY2FsbGJhY2sgKGRhdGEsIHVybFJlc3BvbnNlLCBlcnJvcikKCXJldHVybgogIH0KICBndWFyZCBsZXQgaG9zdCA9IHVybC5ob3N0IGVsc2UgewogICAgY2FsbGJhY2sgKGRhdGEsIHVybFJlc3BvbnNlLCBlcnJvcikKCXJldHVybgogIH0KICBndWFyZCBsZXQgcG9ydCA9IHVybC5wb3J0IGVsc2UgewogICAgY2FsbGJhY2sgKGRhdGEsIHVybFJlc3BvbnNlLCBlcnJvcikKCXJldHVybgogIH0KICBsZXQgb3B0aW9ucyA6IFtDbGllbnRSZXF1ZXN0Lk9wdGlvbnNdID0gWwogICAgLm1ldGhvZChtZXRob2QpLAogICAgLnNjaGVtYShzY2hlbWUpLAogICAgLmhvc3RuYW1lKGhvc3QpLAogICAgLnBvcnQoSW50MTYocG9ydCkpLAogICAgLnBhdGgodXJsLnBhdGgpLAogICAgLy8gaGVhZGVycywgZXRjCiAgXQogIGxldCByZXF1ZXN0ID0gSFRUUC5yZXF1ZXN0KG9wdGlvbnMpIHsgKHJlc3BvbnNlKSBpbgogICAgZ3VhcmQgbGV0IHJlc3BvbnNlID0gcmVzcG9uc2UgZWxzZSB7CiAgICAgIGNhbGxiYWNrIChkYXRhLCB1cmxSZXNwb25zZSwgbmlsKQogICAgICByZXR1cm4KICAgIH0KICAgIHZhciByZXNwb25zZURhdGEgPSBEYXRhKCkKICAgIGRvIHsKICAgICAgbGV0IGNvZGUgPSByZXNwb25zZS5odHRwU3RhdHVzQ29kZQogICAgICB0cnkgcmVzcG9uc2UucmVhZEFsbERhdGEoaW50bzogJnJlc3BvbnNlRGF0YSkKICAgICAgZGF0YSA9IHJlc3BvbnNlRGF0YQogICAgICB1cmxSZXNwb25zZSA9IEhUVFBVUkxSZXNwb25zZSh1cmw6dXJsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNDb2RlOmNvZGUucmF3VmFsdWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBWZXJzaW9uOiJIVFRQLzEuMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlckZpZWxkczpbOl0pCiAgICAgIGNhbGxiYWNrIChkYXRhLCB1cmxSZXNwb25zZSwgbmlsKQogICAgICByZXR1cm4KICAgIH0gY2F0Y2ggewogICAgICBjYWxsYmFjayAoZGF0YSwgdXJsUmVzcG9uc2UsIG5pbCkKICAgICAgcmV0dXJuCiAgICB9CiAgfQogIGlmIGxldCByZXF1ZXN0RGF0YSA9IHVybFJlcXVlc3QuaHR0cEJvZHkgewogICAgcmVxdWVzdC53cml0ZShmcm9tOnJlcXVlc3REYXRhKQogIH0KICByZXF1ZXN0LmVuZCgpIC8vIHNlbmQgdGhlIHJlcXVlc3QKfQo=",
    "server.swift": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KLy8KLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7Ci8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0Ci8vCi8vICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAovLwovLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgovLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoKLy8gU2VydmljZSBjb2RlCgppbXBvcnQgS2l0dXJhCmltcG9ydCBLaXR1cmFOZXQKaW1wb3J0IEZvdW5kYXRpb24KCi8vIEEgc2VydmVyIHJlcXVpcmVzIGFuIGluc3RhbmNlIG9mIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoaXMgcHJvdG9jb2wuCnB1YmxpYyBwcm90b2NvbCBTZXJ2aWNlIHsKLy8teyUgZm9yIHNlcnZpY2VNZXRob2QgaW4gcmVuZGVyZXIubWV0aG9kcyAlfQogIC8vIHt7IHNlcnZpY2VNZXRob2QuZGVzY3JpcHRpb24gfX0KICBmdW5jIHt7IHNlcnZpY2VNZXRob2QubmFtZSB9fSAoe3sgc2VydmljZU1ldGhvZHxwcm90b2NvbFBhcmFtZXRlcnNEZWNsYXJhdGlvbiB9fSkgdGhyb3dzIHt7IHNlcnZpY2VNZXRob2R8cHJvdG9jb2xSZXR1cm5EZWNsYXJhdGlvbiB9fQovLy17JSBlbmRmb3IgJX0KfQoKZnVuYyBpbnRWYWx1ZShfIHM6U3RyaW5nPykgLT4gSW50NjQgewogIGd1YXJkIGxldCBzID0gcyBlbHNlIHsKICAgIHJldHVybiAwCiAgfQogIGd1YXJkIGxldCB2YWx1ZSA9IEludDY0KHMpIGVsc2UgewogICAgcmV0dXJuIDAKICB9CiAgcmV0dXJuIHZhbHVlCn0KCnB1YmxpYyBmdW5jIHNlcnZlcihzZXJ2aWNlIDogU2VydmljZSkgLT4gUm91dGVyIHsKICAvLyBDcmVhdGUgYSBuZXcgcm91dGVyCiAgbGV0IHJvdXRlciA9IFJvdXRlcigpCgovLy17JSBmb3Igc2VydmljZU1ldGhvZCBpbiByZW5kZXJlci5tZXRob2RzICV9CiAgLy8ge3sgc2VydmljZU1ldGhvZC5kZXNjcmlwdGlvbiB9fQogIHJvdXRlci57eyBzZXJ2aWNlTWV0aG9kLm1ldGhvZHxsb3dlcmNhc2UgfX0oInt7IHNlcnZpY2VNZXRob2R8a2l0dXJhUGF0aCB9fSIpIHsgcmVxLCByZXMsIG5leHQgaW4gICAgICAKICAgICAgLy8teyUgaWYgc2VydmljZU1ldGhvZHxoYXNQYXJhbWV0ZXJzICV9CiAgICAgIC8vIGluc3RhbnRpYXRlIHRoZSBwYXJhbWV0ZXJzIHN0cnVjdHVyZQogICAgICBsZXQgcGFyYW1ldGVycyA9IHt7IHNlcnZpY2VNZXRob2QucGFyYW1ldGVyc1R5cGVOYW1lIH19KCkKICAgICAgLy8teyUgZm9yIHNlcnZpY2VUeXBlRmllbGQgaW4gc2VydmljZU1ldGhvZHxwYXJhbWV0ZXJzVHlwZUZpZWxkcyAlfQogICAgICAvLy17JSBpZiBzZXJ2aWNlVHlwZUZpZWxkLnBvc2l0aW9uID09ICJwYXRoIiAlfQogICAgICBwYXJhbWV0ZXJzLnt7IHNlcnZpY2VUeXBlRmllbGQubmFtZSB9fSA9IGludFZhbHVlKHJlcS5wYXJhbWV0ZXJzWyJ7eyBzZXJ2aWNlVHlwZUZpZWxkLm5hbWUgfX0iXSkKICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgLy8teyUgZW5kZm9yICV9ICAgICAKICAgICAgLy8teyUgaWYgc2VydmljZU1ldGhvZC5tZXRob2QgPT0gIlBPU1QiICV9CiAgICAgIC8vIGRlc2VyaWFsaXplIHJlcXVlc3QgZnJvbSBwb3N0IGRhdGEKICAgICAgbGV0IGJvZHlTdHJpbmcgPSB0cnkgcmVxLnJlYWRTdHJpbmcoKSA/PyAiIgogICAgICBndWFyZCBsZXQgYm9keURhdGEgPSBib2R5U3RyaW5nLmRhdGEodXNpbmc6LnV0ZjgpIGVsc2UgewogICAgICAgIHRyeSByZXMuc2VuZChzdGF0dXM6LmJhZFJlcXVlc3QpLmVuZCgpCiAgICAgICAgcmV0dXJuCiAgICAgIH0KICAgICAgdmFyIGpzb25PYmplY3QgOiBBbnk/ID0gbmlsCiAgICAgIGRvIHsKICAgICAgICBqc29uT2JqZWN0ID0gdHJ5IEpTT05TZXJpYWxpemF0aW9uLmpzb25PYmplY3Qod2l0aDpib2R5RGF0YSkKICAgICAgfSBjYXRjaCB7CiAgICAgICAgdHJ5IHJlcy5zZW5kKHN0YXR1czouYmFkUmVxdWVzdCkuZW5kKCkKICAgICAgICByZXR1cm4KICAgICAgfQogICAgICBndWFyZCBsZXQgYm9keU9iamVjdCA9IHt7IHNlcnZpY2VNZXRob2QucmVzdWx0VHlwZU5hbWUgfX0oanNvbk9iamVjdDpqc29uT2JqZWN0KSBlbHNlIHsKICAgICAgICB0cnkgcmVzLnNlbmQoc3RhdHVzOi5iYWRSZXF1ZXN0KS5lbmQoKQogICAgICAgIHJldHVybgogICAgICB9CiAgICAgIHBhcmFtZXRlcnMue3sgc2VydmljZU1ldGhvZHxib2R5UGFyYW1ldGVyRmllbGROYW1lIH19ID0gYm9keU9iamVjdAogICAgICAvLy17JSBlbmRpZiAlfQogICAgICAvLy17JSBlbmRpZiAlfQogICAgICAvLy17JSBpZiBzZXJ2aWNlTWV0aG9kfGhhc1BhcmFtZXRlcnMgJX0KICAgICAgLy8teyUgaWYgc2VydmljZU1ldGhvZHxoYXNSZXNwb25zZXMgJX0KICAgICAgbGV0IHJlc3BvbnNlcyA9IHRyeSBzZXJ2aWNlLnt7IHNlcnZpY2VNZXRob2QubmFtZSB9fShwYXJhbWV0ZXJzKQogICAgICAvLy17JSBlbHNlICV9CiAgICAgIHRyeSBzZXJ2aWNlLnt7IHNlcnZpY2VNZXRob2QubmFtZSB9fShwYXJhbWV0ZXJzKQogICAgICAvLy17JSBlbmRpZiAlfQogICAgICAvLy17JSBlbHNlICV9CiAgICAgIC8vLXslIGlmIHNlcnZpY2VNZXRob2R8aGFzUmVzcG9uc2VzICV9CiAgICAgIGxldCByZXNwb25zZXMgPSB0cnkgc2VydmljZS57eyBzZXJ2aWNlTWV0aG9kLm5hbWUgfX0oKQogICAgICAvLy17JSBlbHNlICV9CiAgICAgIHRyeSBzZXJ2aWNlLnt7IHNlcnZpY2VNZXRob2QubmFtZSB9fSgpCiAgICAgIC8vLXslIGVuZGlmICV9CiAgICAgIC8vLXslIGVuZGlmICV9CiAgICAgIC8vLXslIGlmIHNlcnZpY2VNZXRob2R8aGFzUmVzcG9uc2VzICV9CiAgICAgICAgLy8teyUgaWYgc2VydmljZU1ldGhvZHxyZXNwb25zZXNIYXNGaWVsZE5hbWVkT0sgJX0gICAgICAgICAgICAKICAgICAgICBpZiBsZXQgb2sgPSByZXNwb25zZXMub2sgewogICAgICAgICAgbGV0IGpzb25PYmplY3QgPSBvay5qc29uT2JqZWN0KCkKICAgICAgICAgIGxldCByZXNwb25zZURhdGEgPSB0cnkgSlNPTlNlcmlhbGl6YXRpb24uZGF0YSh3aXRoSlNPTk9iamVjdDpqc29uT2JqZWN0KQogICAgICAgICAgdHJ5IHJlcy5zZW5kKGRhdGE6cmVzcG9uc2VEYXRhKS5lbmQoKSAKICAgICAgICAgIHJldHVybiAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgfSAKICAgICAgICAvLy17JSBlbmRpZiAlfQogICAgICAgIC8vLXslIGlmIHNlcnZpY2VNZXRob2R8cmVzcG9uc2VzSGFzRmllbGROYW1lZEVycm9yICV9ICAgICAgICAgICAgICAgCiAgICAgICAgaWYgbGV0IGVycm9yUmVzcG9uc2UgPSByZXNwb25zZXMuZXJyb3IgewogICAgICAgICAgZ3VhcmQgbGV0IHN0YXR1c0NvZGUgPSBIVFRQU3RhdHVzQ29kZShyYXdWYWx1ZTpJbnQoZXJyb3JSZXNwb25zZS5jb2RlKSkgZWxzZSB7CiAgICAgICAgICAgIHRyeSByZXMuc2VuZChzdGF0dXM6LnVua25vd24pLmVuZCgpCiAgICAgICAgICAgIHJldHVybgogICAgICAgICAgfQogICAgICAgICAgdHJ5IHJlcy5zZW5kKHN0YXR1czpzdGF0dXNDb2RlKS5lbmQoKQogICAgICAgICAgcmV0dXJuICAgICAgICAgICAgICAgCiAgICAgICAgfQogICAgICAgIC8vLXslIGVuZGlmICV9CiAgICAgICAgdHJ5IHJlcy5zZW5kKHN0YXR1czouaW50ZXJuYWxTZXJ2ZXJFcnJvcikuZW5kKCkKICAgICAgLy8teyUgZWxzZSAlfQogICAgICB0cnkgcmVzLnNlbmQoc3RhdHVzOi5PSykuZW5kKCkKICAgICAgLy8teyUgZW5kaWYgJX0KICB9CgovLy17JSBlbmRmb3IgJX0KICByZXR1cm4gcm91dGVyCn0KCnB1YmxpYyBmdW5jIGluaXRpYWxpemUoc2VydmljZTogU2VydmljZSwgcG9ydDpJbnQpIHsKICAvLyBDcmVhdGUgYSBuZXcgcm91dGVyCiAgbGV0IHJvdXRlciA9IHNlcnZlcihzZXJ2aWNlOnNlcnZpY2UpCiAgLy8gQWRkIGFuIEhUVFAgc2VydmVyIGFuZCBjb25uZWN0IGl0IHRvIHRoZSByb3V0ZXIKICBLaXR1cmEuYWRkSFRUUFNlcnZlcihvblBvcnQ6cG9ydCwgd2l0aDogcm91dGVyKQp9CgpwdWJsaWMgZnVuYyBydW4oKSB7CiAgLy8gU3RhcnQgdGhlIEtpdHVyYSBydW5sb29wICh0aGlzIGNhbGwgbmV2ZXIgcmV0dXJucykKICBLaXR1cmEucnVuKCkKfQo=",
    "types.swift": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KLy8KLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7Ci8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0Ci8vCi8vICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAovLwovLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgovLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoKLy8gQ29tbW9uIHR5cGUgZGVjbGFyYXRpb25zCgovLy17JSBmb3Igc2VydmljZVR5cGUgaW4gcmVuZGVyZXIudHlwZXMgJX0KcHVibGljIGNsYXNzIHt7IHNlcnZpY2VUeXBlLm5hbWUgfX0gOiBDdXN0b21TdHJpbmdDb252ZXJ0aWJsZSB7CiAgLy8teyUgZm9yIHNlcnZpY2VUeXBlRmllbGQgaW4gc2VydmljZVR5cGUuZmllbGRzICV9CiAgcHVibGljIHZhciB7e3NlcnZpY2VUeXBlRmllbGQubmFtZX19IDoge3tzZXJ2aWNlVHlwZUZpZWxkLnR5cGVOYW1lfX0gPSB7e3NlcnZpY2VUeXBlRmllbGQuaW5pdGlhbFZhbHVlfX0KICAvLy17JSBlbmRmb3IgJX0KCiAgcHVibGljIGluaXQoKSB7fQoKLy8teyUgaWYgc2VydmljZVR5cGUuaXNJbnRlcmZhY2VUeXBlICV9CiAgcHVibGljIGluaXQ/KGpzb25PYmplY3Q6IEFueT8pIHsKICAgIGlmIGxldCBqc29uRGljdGlvbmFyeSA9IGpzb25PYmplY3QgYXM/IFtTdHJpbmc6QW55XSB7ICAKICAgICAgLy8teyUgZm9yIHNlcnZpY2VUeXBlRmllbGQgaW4gc2VydmljZVR5cGUuZmllbGRzICV9CiAgICAgIGlmIGxldCB2YWx1ZSA6IEFueSA9IGpzb25EaWN0aW9uYXJ5WyJ7eyBzZXJ2aWNlVHlwZUZpZWxkLmpzb25OYW1lIH19Il0gewogICAgICAgIC8vLXslIGlmIHNlcnZpY2VUeXBlRmllbGQuaXNBcnJheVR5cGUgJX0KICAgICAgICB2YXIgb3V0QXJyYXkgOiBbe3sgc2VydmljZVR5cGVGaWVsZC5lbGVtZW50VHlwZSB9fV0gPSBbXQogICAgICAgIGxldCBhcnJheSA9IHZhbHVlIGFzISBbQW55XQogICAgICAgIGZvciBhcnJheVZhbHVlIGluIGFycmF5IHsKICAgICAgICAgIGlmIGxldCBlbGVtZW50ID0ge3sgc2VydmljZVR5cGVGaWVsZC5lbGVtZW50VHlwZSB9fShqc29uT2JqZWN0OmFycmF5VmFsdWUpIHsKICAgICAgICAgICAgb3V0QXJyYXkuYXBwZW5kKGVsZW1lbnQpCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHNlbGYue3tzZXJ2aWNlVHlwZUZpZWxkLm5hbWV9fSA9IG91dEFycmF5CiAgICAgICAgLy8teyUgZW5kaWYgJX0KICAgICAgICAvLy17JSBpZiBzZXJ2aWNlVHlwZUZpZWxkLmlzQ2FzdGFibGVUeXBlICV9CiAgICAgICAgc2VsZi57e3NlcnZpY2VUeXBlRmllbGQubmFtZX19ID0gdmFsdWUgYXMhIHt7c2VydmljZVR5cGVGaWVsZC50eXBlTmFtZX19IAogICAgICAgIC8vLXslIGVuZGlmICV9CiAgICAgICAgLy8teyUgaWYgc2VydmljZVR5cGVGaWVsZC5pc0NvbnZlcnRhYmxlVHlwZSAlfQogICAgICAgIHNlbGYue3tzZXJ2aWNlVHlwZUZpZWxkLm5hbWV9fSA9IHt7c2VydmljZVR5cGVGaWVsZC50eXBlTmFtZX19KHZhbHVlKQogICAgICAgIC8vLXslIGVuZGlmICV9CiAgICAgIH0KICAgICAgLy8teyUgZW5kZm9yICV9ICAgCiAgICB9IGVsc2UgewogICAgICByZXR1cm4gbmlsCiAgICB9CiAgfQogICAgCiAgcHVibGljIGZ1bmMganNvbk9iamVjdCgpIC0+IEFueSB7IAogICAgdmFyIHJlc3VsdCA6IFtTdHJpbmc6QW55XSA9IFs6XQogICAgLy8teyUgZm9yIHNlcnZpY2VUeXBlRmllbGQgaW4gc2VydmljZVR5cGUuZmllbGRzICV9CiAgICAvLy17JSBpZiBzZXJ2aWNlVHlwZUZpZWxkLmlzQXJyYXlUeXBlICV9CiAgICB2YXIgb3V0QXJyYXkgOiBbQW55XSA9IFtdCiAgICBmb3IgYXJyYXlWYWx1ZSBpbiBzZWxmLnt7IHNlcnZpY2VUeXBlRmllbGQubmFtZSB9fSB7CiAgICAgIG91dEFycmF5LmFwcGVuZChhcnJheVZhbHVlLmpzb25PYmplY3QoKSkKICAgIH0KICAgIHJlc3VsdFsie3sgc2VydmljZVR5cGVGaWVsZC5qc29uTmFtZSB9fSJdID0gb3V0QXJyYXkKICAgIC8vLXslIGVuZGlmICV9ICAgICAgCiAgICAvLy17JSBpZiBzZXJ2aWNlVHlwZUZpZWxkLmlzQ2FzdGFibGVUeXBlICV9CiAgICByZXN1bHRbInt7IHNlcnZpY2VUeXBlRmllbGQuanNvbk5hbWUgfX0iXSA9IHNlbGYue3tzZXJ2aWNlVHlwZUZpZWxkLm5hbWV9fSAKICAgIC8vLXslIGVuZGlmICV9ICAgICAgCiAgICAvLy17JSBpZiBzZXJ2aWNlVHlwZUZpZWxkLmlzQ29udmVydGFibGVUeXBlICV9CiAgICByZXN1bHRbInt7IHNlcnZpY2VUeXBlRmllbGQuanNvbk5hbWUgfX0iXSA9IHNlbGYue3tzZXJ2aWNlVHlwZUZpZWxkLm5hbWV9fS5qc29uT2JqZWN0KCkgCiAgICAvLy17JSBlbmRpZiAlfQogICAgLy8teyUgZW5kZm9yICV9IAogICAgcmV0dXJuIHJlc3VsdAogIH0KICAKLy8teyUgZW5kaWYgJX0KICBwdWJsaWMgdmFyIGRlc2NyaXB0aW9uOiBTdHJpbmd7CiAgICByZXR1cm4gIlt7eyBzZXJ2aWNlVHlwZS5uYW1lIH19IiArCiAgICAvLy17JSBmb3Igc2VydmljZVR5cGVGaWVsZCBpbiBzZXJ2aWNlVHlwZS5maWVsZHMgJX0KICAgICAgIiB7eyBzZXJ2aWNlVHlwZUZpZWxkLm5hbWUgfX06IFwoc2VsZi57eyBzZXJ2aWNlVHlwZUZpZWxkLm5hbWUgfX0pIiArICAgCiAgICAvLy17JSBlbmRmb3IgJX0gICAgICAKICAgICJdIgogIH0KfQoKLy8teyUgZW5kZm9yICV9",
  ]
}

